
==================== FINAL INTERFACE ====================
2019-05-26 01:35:23.685288 UTC

interface chapter-exercises-0.1.0.0-MyTkAmxHPpEzugi6gUoOh:SkiFree 8002
  interface hash: aa7723b65b580bc3c9f6e63bab797161
  ABI hash: 5f7698a6848d8ae43d6c76317812b0f4
  export-list hash: 857487baaa64acd6344b1848d3e21568
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 91cd76246f60d900fce8e309e594df82
  sig of: Nothing
  used TH splices: False
  where
exports:
  SkiFree.S{SkiFree.S}
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      checkers-0.4.9.5@checkers-0.4.9.5-Dhm0rh3Bh7qFXgfQ8Df9YH
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         checkers-0.4.9.5@checkers-0.4.9.5-Dhm0rh3Bh7qFXgfQ8Df9YH:Test.QuickCheck.Checkers
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  checkers-0.4.9.5@checkers-0.4.9.5-Dhm0rh3Bh7qFXgfQ8Df9YH:Test.QuickCheck.Checkers 112c6b37bb972e77d1eaca37aac52a50
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
70ac9bdd1837ed00ce7c8729fea15bca
  $fEqS ::
    (GHC.Classes.Eq (n a), GHC.Classes.Eq a) =>
    GHC.Classes.Eq (SkiFree.S n a)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (n :: * -> *)
                      @ a
                      ($dEq :: GHC.Classes.Eq (n a))
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (SkiFree.S n a)
                  (SkiFree.$fEqS_$c== @ n @ a $dEq $dEq1)
                  (SkiFree.$fEqS_$c/= @ n @ a $dEq $dEq1) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fEqS_$c/= ::
    (GHC.Classes.Eq (n a), GHC.Classes.Eq a) =>
    SkiFree.S n a -> SkiFree.S n a -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ (n :: * -> *)
                   @ a
                   (w :: GHC.Classes.Eq (n a))
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: SkiFree.S n a)
                   (w3 :: SkiFree.S n a) ->
                 case w2 of ww { SkiFree.S ww1 ww2 ->
                 case w3 of ww3 { SkiFree.S ww4 ww5 ->
                 SkiFree.$w$c/= @ n @ a w w1 ww1 ww2 ww4 ww5 } }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fEqS_$c== ::
    (GHC.Classes.Eq (n a), GHC.Classes.Eq a) =>
    SkiFree.S n a -> SkiFree.S n a -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ (n :: * -> *)
                   @ a
                   (w :: GHC.Classes.Eq (n a))
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: SkiFree.S n a)
                   (w3 :: SkiFree.S n a) ->
                 case w2 of ww { SkiFree.S ww1 ww2 ->
                 case w3 of ww3 { SkiFree.S ww4 ww5 ->
                 SkiFree.$w$c== @ n @ a w w1 ww1 ww2 ww4 ww5 } }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS ::
    Data.Foldable.Foldable n => Data.Foldable.Foldable (SkiFree.S n)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (n :: * -> *)
                      ($dFoldable :: Data.Foldable.Foldable n).
                  @ (SkiFree.S n)
                  (SkiFree.$fFoldableS_$cfold @ n $dFoldable)
                  (SkiFree.$fFoldableS_$cfoldMap @ n $dFoldable)
                  (SkiFree.$fFoldableS_$cfoldr @ n $dFoldable)
                  (SkiFree.$fFoldableS_$cfoldr' @ n $dFoldable)
                  (SkiFree.$fFoldableS_$cfoldl @ n $dFoldable)
                  (SkiFree.$fFoldableS_$cfoldl' @ n $dFoldable)
                  (SkiFree.$fFoldableS_$cfoldr1 @ n $dFoldable)
                  (SkiFree.$fFoldableS_$cfoldl1 @ n $dFoldable)
                  (SkiFree.$fFoldableS_$ctoList @ n $dFoldable)
                  (SkiFree.$fFoldableS_$cnull @ n $dFoldable)
                  (SkiFree.$fFoldableS_$clength @ n $dFoldable)
                  (SkiFree.$fFoldableS_$celem @ n $dFoldable)
                  (SkiFree.$fFoldableS_$cmaximum @ n $dFoldable)
                  (SkiFree.$fFoldableS_$cminimum @ n $dFoldable)
                  (SkiFree.$fFoldableS_$csum @ n $dFoldable)
                  (SkiFree.$fFoldableS_$cproduct @ n $dFoldable) -}
4637322f1abce2a9e67887d2dc69698a
  $fFoldableS1 :: a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a (tpl :: a) -> tpl) -}
c3ea9306569b2df6dacb9b5f869981d7
  $fFoldableS2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
6f5a3d52a3a8a83f4141010d75c62d79
  $fFoldableS3 :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (z :: GHC.Types.Int) ->
                 case z of wild { GHC.Types.I# x ->
                 GHC.Types.I# (GHC.Prim.+# x 1#) }) -}
1a47cb6c062ac0f9283e7457447c59fc
  $fFoldableS4 ::
    a
    -> (GHC.Types.Int -> GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ @ a
                   (x :: a)
                   (k :: GHC.Types.Int -> GHC.Types.Int)
                   (z :: GHC.Types.Int) ->
                 case z of wild { GHC.Types.I# x1 ->
                 k (GHC.Types.I# (GHC.Prim.+# x1 1#)) }) -}
5550455698b110141c6a2ebc52942dae
  $fFoldableS5 ::
    GHC.Base.Monoid (Data.Monoid.Dual (Data.Monoid.Endo b))
  {- Unfolding: (\ @ b ->
                 Data.Monoid.$fMonoidDual
                   @ (Data.Monoid.Endo b)
                   (Data.Monoid.$fMonoidEndo @ b)) -}
f582742acbab737bed7e4bb9df0de868
  $fFoldableS6 :: a
  {- Strictness: x -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$celem ::
    Data.Foldable.Foldable n =>
    forall a. GHC.Classes.Eq a => a -> SkiFree.S n a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(1*C1(U),A)><L,U>,
     Unfolding: (\ @ (n :: * -> *)
                   ($dFoldable :: Data.Foldable.Foldable n)
                   @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (eta :: a) ->
                 let {
                   f :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 (\ (ds :: SkiFree.S n a) ->
                  case ds of wild { SkiFree.S n1 a1 ->
                  case (Data.Foldable.foldMap
                          @ n
                          $dFoldable
                          @ Data.Monoid.Any
                          @ a
                          Data.Monoid.$fMonoidAny
                          f `cast` (<a>_R ->_R Sym (Data.Monoid.N:Any[0]))
                          n1)
                         `cast`
                       (Data.Monoid.N:Any[0]) of wild1 {
                    GHC.Types.False -> (f a1) `cast` (Sym (Data.Monoid.N:Any[0]))
                    GHC.Types.True
                    -> GHC.Types.True `cast` (Sym (Data.Monoid.N:Any[0])) } })
                   `cast`
                 (<SkiFree.S n a>_R ->_R Data.Monoid.N:Any[0])) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$cfold ::
    Data.Foldable.Foldable n =>
    forall m. GHC.Base.Monoid m => SkiFree.S n m -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LC(C(S))L),U(U,U,U)><S,1*U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (n :: * -> *)
                   ($dFoldable :: Data.Foldable.Foldable n)
                   @ m
                   ($dMonoid :: GHC.Base.Monoid m)
                   (ds :: SkiFree.S n m) ->
                 case ds of wild { SkiFree.S n1 a ->
                 GHC.Base.mappend
                   @ m
                   $dMonoid
                   (Data.Foldable.foldMap
                      @ n
                      $dFoldable
                      @ m
                      @ m
                      $dMonoid
                      (GHC.Base.id @ m)
                      n1)
                   a }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$cfoldMap ::
    Data.Foldable.Foldable n =>
    forall m a. GHC.Base.Monoid m => (a -> m) -> SkiFree.S n a -> m
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LC(C(S))L),U(U,U,U)><L,U><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ (n :: * -> *)
                   (w :: Data.Foldable.Foldable n)
                   @ m
                   @ a
                   (w1 :: GHC.Base.Monoid m)
                   (w2 :: a -> m)
                   (w3 :: SkiFree.S n a) ->
                 case w3 of ww { SkiFree.S ww1 ww2 ->
                 SkiFree.$w$cfoldMap @ n w @ m @ a w1 w2 ww1 ww2 }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$cfoldl ::
    Data.Foldable.Foldable n =>
    forall b a. (b -> a -> b) -> b -> SkiFree.S n a -> b
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ (n :: * -> *)
                   ($dFoldable :: Data.Foldable.Foldable n)
                   @ b
                   @ a
                   (f :: b -> a -> b)
                   (z :: b)
                   (t1 :: SkiFree.S n a) ->
                 case t1 of wild { SkiFree.S n1 a1 ->
                 f ((Data.Foldable.foldMap
                       @ n
                       $dFoldable
                       @ (Data.Monoid.Dual (Data.Monoid.Endo b))
                       @ a
                       (SkiFree.$fFoldableS5 @ b)
                       (\ (x :: a) (eta :: b) -> f eta x)
                         `cast`
                       (<a>_R
                        ->_R Sym (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b>_R)))
                       n1)
                      `cast`
                    (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b>_R))
                      z)
                   a1 }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$cfoldl' ::
    Data.Foldable.Foldable n =>
    forall b a. (b -> a -> b) -> b -> SkiFree.S n a -> b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><L,U><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ (n :: * -> *)
                   (w :: Data.Foldable.Foldable n)
                   @ b
                   @ a
                   (w1 :: b -> a -> b)
                   (w2 :: b)
                   (w3 :: SkiFree.S n a) ->
                 case w3 of ww { SkiFree.S ww1 ww2 ->
                 SkiFree.$w$cfoldl' @ n w @ b @ a w1 w2 ww1 ww2 }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$cfoldl1 ::
    Data.Foldable.Foldable n =>
    forall a. (a -> a -> a) -> SkiFree.S n a -> a
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ (n :: * -> *)
                   ($dFoldable :: Data.Foldable.Foldable n)
                   @ a
                   (f :: a -> a -> a)
                   (xs :: SkiFree.S n a) ->
                 case xs of wild { SkiFree.S n1 a1 ->
                 case (Data.Foldable.foldMap
                         @ n
                         $dFoldable
                         @ (Data.Monoid.Dual (Data.Monoid.Endo (GHC.Base.Maybe a)))
                         @ a
                         (SkiFree.$fFoldableS5 @ (GHC.Base.Maybe a))
                         (\ (x :: a) (eta :: GHC.Base.Maybe a) ->
                          GHC.Base.Just
                            @ a
                            (case eta of wild1 {
                               GHC.Base.Nothing -> x GHC.Base.Just x1 -> f x1 x }))
                           `cast`
                         (<a>_R
                          ->_R Sym (Data.Monoid.N:Dual[0]
                                        (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R)))
                         n1)
                        `cast`
                      (Data.Monoid.N:Dual[0]
                           (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R))
                        (GHC.Base.Nothing @ a) of wild1 {
                   GHC.Base.Nothing -> a1 GHC.Base.Just x -> f x a1 } }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$cfoldr ::
    Data.Foldable.Foldable n =>
    forall a b. (a -> b -> b) -> b -> SkiFree.S n a -> b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><L,U><S,1*U(U,U)>,
     Unfolding: InlineRule (4, True, False)
                (\ @ (n :: * -> *)
                   ($dFoldable :: Data.Foldable.Foldable n)
                   @ a
                   @ b
                   (f :: a -> b -> b)
                   (z :: b)
                   (t1 :: SkiFree.S n a) ->
                 case t1 of wild { SkiFree.S n1 a1 ->
                 (Data.Foldable.foldMap
                    @ n
                    $dFoldable
                    @ (Data.Monoid.Endo b)
                    @ a
                    (Data.Monoid.$fMonoidEndo @ b)
                    f `cast` (<a>_R ->_R Sym (Data.Monoid.N:Endo[0] <b>_R))
                    n1)
                   `cast`
                 (Data.Monoid.N:Endo[0] <b>_R)
                   (f a1 z) }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$cfoldr' ::
    Data.Foldable.Foldable n =>
    forall a b. (a -> b -> b) -> b -> SkiFree.S n a -> b
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><L,U><L,U>,
     Unfolding: (\ @ (n :: * -> *)
                   ($dFoldable :: Data.Foldable.Foldable n)
                   @ a
                   @ b
                   (f :: a -> b -> b)
                   (z0 :: b)
                   (xs :: SkiFree.S n a) ->
                 case xs of wild { SkiFree.S n1 a1 ->
                 case f a1 z0 of vx { DEFAULT ->
                 (Data.Foldable.foldMap
                    @ n
                    $dFoldable
                    @ (Data.Monoid.Dual (Data.Monoid.Endo (b -> b)))
                    @ a
                    (SkiFree.$fFoldableS5 @ (b -> b))
                    (\ (x :: a) (eta :: b -> b) (eta1 :: b) ->
                     case f x eta1 of vx1 { DEFAULT -> eta vx1 })
                      `cast`
                    (<a>_R
                     ->_R Sym (Data.Monoid.N:Dual[0]
                                   (Data.Monoid.N:Endo[0] <b -> b>_R)))
                    n1)
                   `cast`
                 (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b -> b>_R))
                   (GHC.Base.id @ b)
                   vx } }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$cfoldr1 ::
    Data.Foldable.Foldable n =>
    forall a. (a -> a -> a) -> SkiFree.S n a -> a
  {- Arity: 3,
     Strictness: <S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (n :: * -> *)
                   (w :: Data.Foldable.Foldable n)
                   @ a
                   (w1 :: a -> a -> a)
                   (w2 :: SkiFree.S n a) ->
                 case w2 of ww { SkiFree.S ww1 ww2 ->
                 SkiFree.$w$cfoldr1 @ n w @ a w1 ww1 ww2 }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$clength ::
    Data.Foldable.Foldable n =>
    forall a. SkiFree.S n a -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ (n :: * -> *)
                   (w :: Data.Foldable.Foldable n)
                   @ a
                   (w1 :: SkiFree.S n a) ->
                 case w1 of ww { SkiFree.S ww1 ww2 ->
                 SkiFree.$w$clength @ n w @ a ww1 ww2 }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$cmaximum ::
    Data.Foldable.Foldable n =>
    forall a. GHC.Classes.Ord a => SkiFree.S n a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,A,A,A,A,C(C1(U)),A,A)>,
     Unfolding: (\ @ (n :: * -> *)
                   ($dFoldable :: Data.Foldable.Foldable n)
                   @ a
                   ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   $dMonoid :: GHC.Base.Monoid (Data.Foldable.Max a)
                   = Data.Foldable.$fMonoidMax @ a $dOrd
                 } in
                 \ (x :: SkiFree.S n a) ->
                 case x of wild { SkiFree.S n1 a1 ->
                 case (Data.Foldable.foldMap
                         @ n
                         $dFoldable
                         @ (Data.Foldable.Max a)
                         @ a
                         $dMonoid
                         (GHC.Base.Just @ a)
                           `cast`
                         (<a>_R ->_R Sym (Data.Foldable.N:Max[0]) <a>_N)
                         n1)
                        `cast`
                      (Data.Foldable.N:Max[0] <a>_N) of wild1 {
                   GHC.Base.Nothing -> a1
                   GHC.Base.Just x1
                   -> case GHC.Classes.>= @ a $dOrd x1 a1 of wild2 {
                        GHC.Types.False -> a1 GHC.Types.True -> x1 } } }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$cminimum ::
    Data.Foldable.Foldable n =>
    forall a. GHC.Classes.Ord a => SkiFree.S n a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,A,A,C(C1(U)),A,A,A,A)>,
     Unfolding: (\ @ (n :: * -> *)
                   ($dFoldable :: Data.Foldable.Foldable n)
                   @ a
                   ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   $dMonoid :: GHC.Base.Monoid (Data.Foldable.Min a)
                   = Data.Foldable.$fMonoidMin @ a $dOrd
                 } in
                 \ (x :: SkiFree.S n a) ->
                 case x of wild { SkiFree.S n1 a1 ->
                 case (Data.Foldable.foldMap
                         @ n
                         $dFoldable
                         @ (Data.Foldable.Min a)
                         @ a
                         $dMonoid
                         (GHC.Base.Just @ a)
                           `cast`
                         (<a>_R ->_R Sym (Data.Foldable.N:Min[0]) <a>_N)
                         n1)
                        `cast`
                      (Data.Foldable.N:Min[0] <a>_N) of wild1 {
                   GHC.Base.Nothing -> a1
                   GHC.Base.Just x1
                   -> case GHC.Classes.<= @ a $dOrd x1 a1 of wild2 {
                        GHC.Types.False -> a1 GHC.Types.True -> x1 } } }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$cnull ::
    Data.Foldable.Foldable n =>
    forall a. SkiFree.S n a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U(U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (n :: * -> *)
                   ($dFoldable :: Data.Foldable.Foldable n)
                   @ a
                   (eta :: SkiFree.S n a) ->
                 case eta of wild { SkiFree.S n1 a1 ->
                 (Data.Foldable.foldMap
                    @ n
                    $dFoldable
                    @ (Data.Monoid.Endo GHC.Types.Bool)
                    @ a
                    (Data.Monoid.$fMonoidEndo @ GHC.Types.Bool)
                    (\ (ds :: a) (ds1 :: GHC.Types.Bool) -> GHC.Types.False)
                      `cast`
                    (<a>_R ->_R Sym (Data.Monoid.N:Endo[0] <GHC.Types.Bool>_R))
                    n1)
                   `cast`
                 (Data.Monoid.N:Endo[0] <GHC.Types.Bool>_R)
                   GHC.Types.False }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$cproduct ::
    Data.Foldable.Foldable n =>
    forall a. GHC.Num.Num a => SkiFree.S n a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,A,U,A,A,A,C(U))>,
     Unfolding: (\ @ (n :: * -> *)
                   ($dFoldable :: Data.Foldable.Foldable n)
                   @ a
                   ($dNum :: GHC.Num.Num a) ->
                 let {
                   $dMonoid :: GHC.Base.Monoid (Data.Monoid.Product a)
                   = Data.Monoid.$fMonoidProduct @ a $dNum
                 } in
                 (\ (ds :: SkiFree.S n a) ->
                  case ds of wild { SkiFree.S n1 a1 ->
                  (GHC.Num.*
                     @ a
                     $dNum
                     (Data.Foldable.foldMap
                        @ n
                        $dFoldable
                        @ (Data.Monoid.Product a)
                        @ a
                        $dMonoid
                        (SkiFree.$fFoldableS1 @ a)
                          `cast`
                        (<a>_R ->_R Sym (Data.Monoid.N:Product[0] <a>_R))
                        n1)
                       `cast`
                     (Data.Monoid.N:Product[0] <a>_R)
                     a1)
                    `cast`
                  (Sym (Data.Monoid.N:Product[0] <a>_R)) })
                   `cast`
                 (<SkiFree.S n a>_R ->_R Data.Monoid.N:Product[0] <a>_R)) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$csum ::
    Data.Foldable.Foldable n =>
    forall a. GHC.Num.Num a => SkiFree.S n a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(U,A,A,A,A,A,C(U))>,
     Unfolding: (\ @ (n :: * -> *)
                   ($dFoldable :: Data.Foldable.Foldable n)
                   @ a
                   ($dNum :: GHC.Num.Num a) ->
                 let {
                   $dMonoid :: GHC.Base.Monoid (Data.Monoid.Sum a)
                   = Data.Monoid.$fMonoidSum @ a $dNum
                 } in
                 (\ (ds :: SkiFree.S n a) ->
                  case ds of wild { SkiFree.S n1 a1 ->
                  (GHC.Num.+
                     @ a
                     $dNum
                     (Data.Foldable.foldMap
                        @ n
                        $dFoldable
                        @ (Data.Monoid.Sum a)
                        @ a
                        $dMonoid
                        (SkiFree.$fFoldableS1 @ a)
                          `cast`
                        (<a>_R ->_R Sym (Data.Monoid.N:Sum[0] <a>_R))
                        n1)
                       `cast`
                     (Data.Monoid.N:Sum[0] <a>_R)
                     a1)
                    `cast`
                  (Sym (Data.Monoid.N:Sum[0] <a>_R)) })
                   `cast`
                 (<SkiFree.S n a>_R ->_R Data.Monoid.N:Sum[0] <a>_R)) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFoldableS_$ctoList ::
    Data.Foldable.Foldable n => forall a. SkiFree.S n a -> [a]
  {- Arity: 2,
     Strictness: <L,U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ (n :: * -> *)
                   ($dFoldable :: Data.Foldable.Foldable n)
                   @ a
                   (t1 :: SkiFree.S n a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n1 :: b)[OneShot] ->
                    SkiFree.$fFoldableS_$cfoldr @ n $dFoldable @ a @ b c n1 t1)) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFunctorS :: GHC.Base.Functor n => GHC.Base.Functor (SkiFree.S n)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (n :: * -> *) ($dFunctor :: GHC.Base.Functor n).
                  @ (SkiFree.S n)
                  (SkiFree.$fFunctorS_$cfmap @ n $dFunctor)
                  (SkiFree.$fFunctorS_$c<$ @ n $dFunctor) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFunctorS_$c<$ ::
    GHC.Base.Functor n =>
    forall a b. a -> SkiFree.S n b -> SkiFree.S n a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,U><S,1*U(U,A)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ (n :: * -> *)
                   ($dFunctor :: GHC.Base.Functor n)
                   @ a
                   @ b
                   (eta :: a)
                   (eta1 :: SkiFree.S n b) ->
                 case eta1 of wild { SkiFree.S n1 a1 ->
                 SkiFree.S
                   @ n
                   @ a
                   (GHC.Base.fmap @ n $dFunctor @ b @ a (\ (ds :: b) -> eta) n1)
                   eta }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fFunctorS_$cfmap ::
    GHC.Base.Functor n =>
    forall a b. (a -> b) -> SkiFree.S n a -> SkiFree.S n b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,U><S,1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ (n :: * -> *)
                   ($dFunctor :: GHC.Base.Functor n)
                   @ a
                   @ b
                   (f :: a -> b)
                   (ds :: SkiFree.S n a) ->
                 case ds of wild { SkiFree.S n1 a1 ->
                 SkiFree.S
                   @ n
                   @ b
                   (GHC.Base.fmap @ n $dFunctor @ a @ b f n1)
                   (f a1) }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fShowS ::
    (GHC.Show.Show (n a), GHC.Show.Show a) =>
    GHC.Show.Show (SkiFree.S n a)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (n :: * -> *)
                      @ a
                      ($dShow :: GHC.Show.Show (n a))
                      ($dShow1 :: GHC.Show.Show a).
                  @ (SkiFree.S n a)
                  (SkiFree.$fShowS_$cshowsPrec @ n @ a $dShow $dShow1)
                  (SkiFree.$fShowS_$cshow @ n @ a $dShow $dShow1)
                  (SkiFree.$fShowS_$cshowList @ n @ a $dShow $dShow1) -}
8fb1e6d4afcc7bbc12e79b6cf019e688
  $fShowS1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "S "#) -}
183c6ca2e39c756d1000cd3b903c7f63
  $fShowS2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fShowS_$cshow ::
    (GHC.Show.Show (n a), GHC.Show.Show a) =>
    SkiFree.S n a -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (n :: * -> *)
                   @ a
                   ($dShow :: GHC.Show.Show (n a))
                   ($dShow1 :: GHC.Show.Show a)
                   (x :: SkiFree.S n a) ->
                 SkiFree.$fShowS_$cshowsPrec
                   @ n
                   @ a
                   $dShow
                   $dShow1
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fShowS_$cshowList ::
    (GHC.Show.Show (n a), GHC.Show.Show a) =>
    [SkiFree.S n a] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ (n :: * -> *)
                   @ a
                   ($dShow :: GHC.Show.Show (n a))
                   ($dShow1 :: GHC.Show.Show a)
                   (eta :: [SkiFree.S n a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (SkiFree.S n a)
                   (SkiFree.$fShowS_$cshowsPrec
                      @ n
                      @ a
                      $dShow
                      $dShow1
                      SkiFree.$fFoldableS2)
                   eta
                   eta1) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fShowS_$cshowsPrec ::
    (GHC.Show.Show (n a), GHC.Show.Show a) =>
    GHC.Types.Int -> SkiFree.S n a -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ (n :: * -> *)
                   @ a
                   (w :: GHC.Show.Show (n a))
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: SkiFree.S n a) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { SkiFree.S ww3 ww4 ->
                 SkiFree.$w$cshowsPrec @ n @ a w w1 ww1 ww3 ww4 } }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fTraversableS ::
    Data.Traversable.Traversable n =>
    Data.Traversable.Traversable (SkiFree.S n)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(1*U(C(C1(U)),A),1*U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A),C(C1(C1(U))),A,A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (n :: * -> *)
                      ($dTraversable :: Data.Traversable.Traversable n).
                  @ (SkiFree.S n)
                  (SkiFree.$fTraversableS_$cp1Traversable @ n $dTraversable)
                  (SkiFree.$fTraversableS_$cp2Traversable @ n $dTraversable)
                  (SkiFree.$fTraversableS_$ctraverse @ n $dTraversable)
                  (SkiFree.$fTraversableS_$csequenceA @ n $dTraversable)
                  (SkiFree.$fTraversableS_$cmapM @ n $dTraversable)
                  (SkiFree.$fTraversableS_$csequence @ n $dTraversable) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fTraversableS_$cmapM ::
    Data.Traversable.Traversable n =>
    forall (m :: * -> *) a b.
    GHC.Base.Monad m =>
    (a -> m b) -> SkiFree.S n a -> m (SkiFree.S n b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><S(S(LLC(C(S))LL)LLLL),1*U(1*U(U(U,U),U,U,U,U),A,A,A,A)><L,U><S,1*U(U,U)>,
     Unfolding: InlineRule (4, True, False)
                (\ @ (n :: * -> *)
                   ($dTraversable :: Data.Traversable.Traversable n)
                   @ (m :: * -> *)
                   @ a
                   @ b
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: a -> m b)
                   (eta1 :: SkiFree.S n a) ->
                 SkiFree.$fTraversableS_$ctraverse
                   @ n
                   $dTraversable
                   @ m
                   @ a
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)
                   eta
                   eta1) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fTraversableS_$cp1Traversable ::
    Data.Traversable.Traversable n => GHC.Base.Functor (SkiFree.S n)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ (n :: * -> *)
                   ($dTraversable :: Data.Traversable.Traversable n) ->
                 SkiFree.$fFunctorS
                   @ n
                   (Data.Traversable.$p1Traversable @ n $dTraversable)) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fTraversableS_$cp2Traversable ::
    Data.Traversable.Traversable n =>
    Data.Foldable.Foldable (SkiFree.S n)
  {- Arity: 1,
     Strictness: <L,1*U(A,1*U(A,C(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (n :: * -> *)
                   ($dTraversable :: Data.Traversable.Traversable n) ->
                 SkiFree.$fFoldableS
                   @ n
                   (Data.Traversable.$p2Traversable @ n $dTraversable)) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fTraversableS_$csequence ::
    Data.Traversable.Traversable n =>
    forall (m :: * -> *) a.
    GHC.Base.Monad m =>
    SkiFree.S n (m a) -> m (SkiFree.S n a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><S(S(LLC(C(S))LL)LLLL),1*U(1*U(U(U,U),U,U,U,U),A,A,A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (n :: * -> *)
                   ($dTraversable :: Data.Traversable.Traversable n)
                   @ (m :: * -> *)
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: SkiFree.S n (m a)) ->
                 SkiFree.$fTraversableS_$csequenceA
                   @ n
                   $dTraversable
                   @ m
                   @ a
                   (GHC.Base.$p1Monad @ m $dMonad)
                   eta) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fTraversableS_$csequenceA ::
    Data.Traversable.Traversable n =>
    forall (f :: * -> *) a.
    GHC.Base.Applicative f =>
    SkiFree.S n (f a) -> f (SkiFree.S n a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><S(LLC(C(S))LL),U(U(U,U),U,U,U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (n :: * -> *)
                   (w :: Data.Traversable.Traversable n)
                   @ (f :: * -> *)
                   @ a
                   (w1 :: GHC.Base.Applicative f)
                   (w2 :: SkiFree.S n (f a)) ->
                 case w2 of ww { SkiFree.S ww1 ww2 ->
                 SkiFree.$w$csequenceA @ n w @ f @ a w1 ww1 ww2 }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $fTraversableS_$ctraverse ::
    Data.Traversable.Traversable n =>
    forall (f :: * -> *) a b.
    GHC.Base.Applicative f =>
    (a -> f b) -> SkiFree.S n a -> f (SkiFree.S n b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><S(LLC(C(S))LL),U(U(U,U),U,U,U,U)><L,U><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ (n :: * -> *)
                   (w :: Data.Traversable.Traversable n)
                   @ (f :: * -> *)
                   @ a
                   @ b
                   (w1 :: GHC.Base.Applicative f)
                   (w2 :: a -> f b)
                   (w3 :: SkiFree.S n a) ->
                 case w3 of ww { SkiFree.S ww1 ww2 ->
                 SkiFree.$w$ctraverse @ n w @ f @ a @ b w1 w2 ww1 ww2 }) -}
987d6ae50092050bba094550f3c0d200
  $tc'S :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14718919407004018309##
                   12671958660092603725##
                   SkiFree.$trModule
                   SkiFree.$tc'S1) -}
fccb0ea89028791dea25f8687286d72d
  $tc'S1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'S"#) -}
0d494fc16e0cbac6c15731c888c0b8bf
  $tcS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12446786044460629082##
                   16444152085019227255##
                   SkiFree.$trModule
                   SkiFree.$tcS1) -}
2089568a8b9994f465a9022017081362
  $tcS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "S"#) -}
8eeaec6195ea1ab0363afe8c377a12d6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SkiFree.$trModule2
                   SkiFree.$trModule1) -}
54f32e67dc78175ab22940ddfae03553
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SkiFree"#) -}
5520e464e0650151372aad36cc0235ea
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "chapter-exercises-0.1.0.0-MyTkAmxHPpEzugi6gUoOh"#) -}
6aa5e9a9d23719b8ff9d953e00a3d2b7
  $w$c/= ::
    (GHC.Classes.Eq (n a), GHC.Classes.Eq a) =>
    n a -> a -> n a -> a -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (n :: * -> *)
                   @ a
                   (w :: GHC.Classes.Eq (n a))
                   (w1 :: GHC.Classes.Eq a)
                   (ww :: n a)
                   (ww1 :: a)
                   (ww2 :: n a)
                   (ww3 :: a) ->
                 case GHC.Classes.== @ (n a) w ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.== @ a w1 ww1 ww3 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
8c87924488b913579c4770a658ad3b6c
  $w$c== ::
    (GHC.Classes.Eq (n a), GHC.Classes.Eq a) =>
    n a -> a -> n a -> a -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (n :: * -> *)
                   @ a
                   (w :: GHC.Classes.Eq (n a))
                   (w1 :: GHC.Classes.Eq a)
                   (ww :: n a)
                   (ww1 :: a)
                   (ww2 :: n a)
                   (ww3 :: a) ->
                 case GHC.Classes.== @ (n a) w ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.== @ a w1 ww1 ww3 }) -}
0c8e2704cc2b270d2eb2896d3f65749d
  $w$cfoldMap ::
    Data.Foldable.Foldable n =>
    forall m a. GHC.Base.Monoid m => (a -> m) -> n a -> a -> m
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LC(C(S))L),U(U,U,U)><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (n :: * -> *)
                   (w :: Data.Foldable.Foldable n)
                   @ m
                   @ a
                   (w1 :: GHC.Base.Monoid m)
                   (w2 :: a -> m)
                   (ww :: n a)
                   (ww1 :: a) ->
                 GHC.Base.mappend
                   @ m
                   w1
                   (Data.Foldable.foldMap @ n w @ m @ a w1 w2 ww)
                   (w2 ww1)) -}
f94c0635375238e14ba5222fe60a7478
  $w$cfoldl' ::
    Data.Foldable.Foldable n =>
    forall b a. (b -> a -> b) -> b -> n a -> a -> b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (n :: * -> *)
                   (w :: Data.Foldable.Foldable n)
                   @ b
                   @ a
                   (w1 :: b -> a -> b)
                   (w2 :: b)
                   (ww :: n a)
                   (ww1 :: a) ->
                 (Data.Foldable.foldMap
                    @ n
                    w
                    @ (Data.Monoid.Endo (b -> b))
                    @ a
                    (Data.Monoid.$fMonoidEndo @ (b -> b))
                    (\ (x :: a) (k :: b -> b) (z :: b) ->
                     case w1 z x of vx { DEFAULT -> k vx })
                      `cast`
                    (<a>_R ->_R Sym (Data.Monoid.N:Endo[0] <b -> b>_R))
                    ww)
                   `cast`
                 (Data.Monoid.N:Endo[0] <b -> b>_R)
                   (\ (z :: b) -> w1 z ww1)
                   w2) -}
d6cfbe570accbe1d651f96405ab7bdf8
  $w$cfoldr1 ::
    Data.Foldable.Foldable n =>
    forall a. (a -> a -> a) -> n a -> a -> a
  {- Arity: 4,
     Strictness: <S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (n :: * -> *)
                   (w :: Data.Foldable.Foldable n)
                   @ a
                   (w1 :: a -> a -> a)
                   (ww :: n a)
                   (ww1 :: a) ->
                 case (Data.Foldable.foldMap
                         @ n
                         w
                         @ (Data.Monoid.Endo (GHC.Base.Maybe a))
                         @ a
                         (Data.Monoid.$fMonoidEndo @ (GHC.Base.Maybe a))
                         (\ (x :: a) (m :: GHC.Base.Maybe a) ->
                          GHC.Base.Just
                            @ a
                            (case m of wild {
                               GHC.Base.Nothing -> x GHC.Base.Just y -> w1 x y }))
                           `cast`
                         (<a>_R ->_R Sym (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R))
                         ww)
                        `cast`
                      (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R)
                        (GHC.Base.Just @ a ww1) of wild {
                   GHC.Base.Nothing -> SkiFree.$fFoldableS6 @ a
                   GHC.Base.Just v -> v }) -}
6f54474d51e73be5a58718c930dd9a33
  $w$clength ::
    Data.Foldable.Foldable n => forall a. n a -> a -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (n :: * -> *)
                   (w :: Data.Foldable.Foldable n)
                   @ a
                   (ww :: n a)
                   (ww1 :: a) ->
                 (Data.Foldable.foldMap
                    @ n
                    w
                    @ (Data.Monoid.Endo (GHC.Types.Int -> GHC.Types.Int))
                    @ a
                    (Data.Monoid.$fMonoidEndo @ (GHC.Types.Int -> GHC.Types.Int))
                    (SkiFree.$fFoldableS4 @ a)
                      `cast`
                    (<a>_R
                     ->_R Sym (Data.Monoid.N:Endo[0]
                                   <GHC.Types.Int -> GHC.Types.Int>_R))
                    ww)
                   `cast`
                 (Data.Monoid.N:Endo[0] <GHC.Types.Int -> GHC.Types.Int>_R)
                   SkiFree.$fFoldableS3
                   SkiFree.$fFoldableS2) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $w$csequenceA ::
    Data.Traversable.Traversable n =>
    forall (f :: * -> *) a.
    GHC.Base.Applicative f =>
    n (f a) -> f a -> f (SkiFree.S n a)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><S(LLC(C(S))LL),U(U(U,U),U,U,U,U)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (n :: * -> *)
                   (w :: Data.Traversable.Traversable n)
                   @ (f :: * -> *)
                   @ a
                   (w1 :: GHC.Base.Applicative f)
                   (ww :: n (f a))
                   (ww1 :: f a) ->
                 GHC.Base.<*>
                   @ f
                   w1
                   @ a
                   @ (SkiFree.S n a)
                   (GHC.Base.fmap
                      @ f
                      (GHC.Base.$p1Applicative @ f w1)
                      @ (n a)
                      @ (a -> SkiFree.S n a)
                      (SkiFree.S @ n @ a)
                      (Data.Traversable.traverse
                         @ n
                         w
                         @ f
                         @ (f a)
                         @ a
                         w1
                         (GHC.Base.id @ (f a))
                         ww))
                   ww1) -}
057af91ef58e43440f889ec22dde2cc6
  $w$cshowsPrec ::
    (GHC.Show.Show (n a), GHC.Show.Show a) =>
    GHC.Prim.Int# -> n a -> a -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (n :: * -> *)
                   @ a
                   (w :: GHC.Show.Show (n a))
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: n a)
                   (ww2 :: a) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ (n a) w SkiFree.$fShowS2 ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w1 SkiFree.$fShowS2 ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        SkiFree.$fShowS1
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           SkiFree.$fShowS1
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))))) }) -}
70ac9bdd1837ed00ce7c8729fea15bca
  $w$ctraverse ::
    Data.Traversable.Traversable n =>
    forall (f :: * -> *) a b.
    GHC.Base.Applicative f =>
    (a -> f b) -> n a -> a -> f (SkiFree.S n b)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(C1(U))),A,A,A)><S(LLC(C(S))LL),U(U(U,U),U,U,U,U)><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (n :: * -> *)
                   (w :: Data.Traversable.Traversable n)
                   @ (f :: * -> *)
                   @ a
                   @ b
                   (w1 :: GHC.Base.Applicative f)
                   (w2 :: a -> f b)
                   (ww :: n a)
                   (ww1 :: a) ->
                 GHC.Base.<*>
                   @ f
                   w1
                   @ b
                   @ (SkiFree.S n b)
                   (GHC.Base.fmap
                      @ f
                      (GHC.Base.$p1Applicative @ f w1)
                      @ (n b)
                      @ (b -> SkiFree.S n b)
                      (SkiFree.S @ n @ b)
                      (Data.Traversable.traverse @ n w @ f @ a @ b w1 w2 ww))
                   (w2 ww1)) -}
70ac9bdd1837ed00ce7c8729fea15bca
  type role S representational nominal
  data S (n :: * -> *) a = S (n a) a
instance GHC.Classes.Eq [SkiFree.S] = SkiFree.$fEqS
instance Data.Foldable.Foldable [SkiFree.S] = SkiFree.$fFoldableS
instance GHC.Base.Functor [SkiFree.S] = SkiFree.$fFunctorS
instance GHC.Show.Show [SkiFree.S] = SkiFree.$fShowS
instance Data.Traversable.Traversable [SkiFree.S]
  = SkiFree.$fTraversableS
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

