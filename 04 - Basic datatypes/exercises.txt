Exercises: Mood Swing
1. Mood.
2. Either Blah or Woot.
3. The type signature should be Mood -> Mood, as the function deals with the
   type itself (Mood), not the specific value (Woot or Blah).
4. changeMood :: Mood -> Mood
   changeMood Blah = Woot
   changeMood _    = Blah
5. See mood.hs

Exercises: Find the Mistakes
1. True must be capitalized.
2. Use == instead of = for comparison.
3. No mistakes, although (1 * 2) is smaller than 5.
4. The types Merry and Happy have not been defined, but either way, perhaps the
   author wanted strings instead of lists. Or perhaps he wanted those two to be
   strings inside lists. Anyway, I'd suggest he wanted ["Merry"] > ["Happy"].
5. Int list and String cannot be concatenated.

Chapter Exercises
1. length :: [a] -> Int
2. a) 5
   b) 3
   c) 2
   d) 5
3. The second one results in a error, because length works on fractional types,
   but length returns Int which is not fractional. Although 6 / 3 is not
   fractional, the Haskell compiler only attempts to generate types for the
   values at the last moment possible, so here it infers they should be
   fractional, unlike length which is already defined as Int (unlike 6 and 3,
   which are Num).
4. 6 `div` length [1, 2, 3]
5. It is Bool. We should expect True as result.
6. Bool; False.
7. Works: length allAwesome == 2
          length allAwesome + length awesome
          (8 == 8) && ('b' < 'a')
   Which will yield: True
                     5
                     False
   Doesn't work: length [1, 'a', 3, 'b']
                 (8 == 8) && 9
   Which don't work because: Lists must be homogeneous.
                             9 doesn't evaluate to Bool.
8. isPalindrome :: (Eq a) => [a] -> Bool
   isPalindrome x = reverse x == x
9. myAbs :: Integer -> Integer
   myAbs x = if x >= 0 then x else -x
10. f :: (a, b) -> (c, d) -> ((b, d), (a, c))
    f p q = ((snd p, snd q), (fst p, fst q))
    
Correcting syntax
See correcting-syntax.hs

Match the function names to their types
1. b)
2. b)
3. a)
4. d)
