
==================== FINAL INTERFACE ====================
2019-05-25 02:56:42.3255216 UTC

interface main:Main 8065
  interface hash: 28197a3d03922b7f2f3fe549eea5be01
  ABI hash: ee19ece8ae4e3ef08e85cee11186ae20
  export-list hash: 56db732999bcf7c13691d0d3b4fbcdce
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2dbacc6c03e2b180218352a7b0b3fd70
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.alphaNum
  Main.app
  Main.getURI
  Main.linkShorty
  Main.main
  Main.randomElement
  Main.saveURI
  Main.shortyAintUri
  Main.shortyCreated
  Main.shortyFound
  Main.shortyGen
module dependencies:
package dependencies: HTTP-4000.3.13 aeson-1.4.2.0 appar-0.1.8
                      array-0.5.3.0 asn1-encoding-0.9.5 asn1-parse-0.9.4 asn1-types-0.3.2
                      async-2.2.1 attoparsec-0.13.2.2 auto-update-0.1.4.1 base-4.12.0.0
                      base-compat-0.10.5 basement-0.0.10 binary-0.8.6.0
                      blaze-builder-0.4.1.0 bsb-http-chunked-0.0.0.4 byteorder-1.0.4
                      bytestring-0.10.8.2 bytestring-lexing-0.5.0.2
                      case-insensitive-1.2.0.11 cereal-0.5.8.0 containers-0.6.0.1
                      cryptonite-0.25 data-default-class-0.1.2.0 deepseq-1.4.4.0
                      directory-1.3.3.0 dlist-0.8.0.6 errors-2.3.0 exceptions-0.10.2
                      filepath-1.4.2.1 ghc-boot-th-8.6.5 ghc-prim-0.5.3 hashable-1.2.7.0
                      hedis-0.10.10 hourglass-0.2.12 http-date-0.0.8 http-types-0.12.3
                      http2-1.6.5 integer-gmp-1.0.2.0 integer-logarithms-1.0.3
                      iproute-1.7.7 memory-0.14.18 monad-control-1.0.2.3 mtl-2.2.2
                      network-2.8.0.1 network-byte-order-0.0.0.0 network-uri-2.6.1.0
                      parsec-3.1.13.0 pem-0.2.4 primitive-0.6.4.0 psqueues-0.2.7.1
                      random-1.1 regex-base-0.93.2 regex-compat-0.95.1 regex-posix-0.95.2
                      resource-pool-0.2.3.2 resourcet-1.2.2 scanner-0.3
                      scientific-0.3.6.2 scotty-0.11.4 simple-sendfile-0.2.28 stm-2.5.0.0
                      streaming-commons-0.2.1.0 tagged-0.8.6 template-haskell-2.14.0.0
                      text-1.2.3.1 time-1.8.0.2 time-locale-compat-0.1.1.5 tls-1.4.1
                      transformers-0.5.6.2 transformers-base-0.4.5.2 unix-2.7.2.2
                      unix-compat-0.5.1 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vault-0.3.1.2
                      vector-0.12.0.3 wai-3.2.2 wai-extra-3.0.26 warp-3.2.27 word8-0.1.3
                      x509-1.7.5 x509-store-1.6.7 x509-validation-1.6.11
orphans: basement-0.0.10:Basement.UArray.Base
         basement-0.0.10:Basement.Block
         regex-posix-0.95.2:Text.Regex.Posix.String
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-base-0.93.2:Text.Regex.Base.Context
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         vector-0.12.0.3:Data.Vector.Unboxed
         vector-0.12.0.3:Data.Vector.Fusion.Bundle
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         network-2.8.0.1:Network.Socket stm-2.5.0.0:Control.Monad.STM
         transformers-0.5.6.2:Control.Monad.Trans.Error
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: aeson-1.4.2.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         basement-0.0.10:Basement.Block.Base
                         basement-0.0.10:Basement.Bounded basement-0.0.10:Basement.Monad
                         basement-0.0.10:Basement.MutableBuilder
                         basement-0.0.10:Basement.Nat basement-0.0.10:Basement.NonEmpty
                         basement-0.0.10:Basement.Numerical.Subtractive
                         basement-0.0.10:Basement.PrimType basement-0.0.10:Basement.String
                         basement-0.0.10:Basement.String.Encoding.ASCII7
                         basement-0.0.10:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.10:Basement.String.Encoding.UTF16
                         basement-0.0.10:Basement.String.Encoding.UTF32
                         basement-0.0.10:Basement.Types.OffsetSize
                         basement-0.0.10:Basement.UArray.Base
                         basement-0.0.10:Basement.UTF8.Base
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         cryptonite-0.25:Crypto.ECC cryptonite-0.25:Crypto.Error.Types
                         cryptonite-0.25:Crypto.Hash.Blake2
                         cryptonite-0.25:Crypto.Hash.Blake2b
                         cryptonite-0.25:Crypto.Hash.Blake2bp
                         cryptonite-0.25:Crypto.Hash.Blake2s
                         cryptonite-0.25:Crypto.Hash.Blake2sp
                         cryptonite-0.25:Crypto.Hash.Keccak cryptonite-0.25:Crypto.Hash.MD2
                         cryptonite-0.25:Crypto.Hash.MD4 cryptonite-0.25:Crypto.Hash.MD5
                         cryptonite-0.25:Crypto.Hash.RIPEMD160
                         cryptonite-0.25:Crypto.Hash.SHA1 cryptonite-0.25:Crypto.Hash.SHA224
                         cryptonite-0.25:Crypto.Hash.SHA256 cryptonite-0.25:Crypto.Hash.SHA3
                         cryptonite-0.25:Crypto.Hash.SHA384
                         cryptonite-0.25:Crypto.Hash.SHA512
                         cryptonite-0.25:Crypto.Hash.SHA512t
                         cryptonite-0.25:Crypto.Hash.SHAKE
                         cryptonite-0.25:Crypto.Hash.Skein256
                         cryptonite-0.25:Crypto.Hash.Skein512
                         cryptonite-0.25:Crypto.Hash.Tiger
                         cryptonite-0.25:Crypto.Hash.Whirlpool dlist-0.8.0.6:Data.DList
                         ghc-boot-th-8.6.5:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.5:GHC.LanguageExtensions.Type
                         hedis-0.10.10:Database.Redis.Protocol
                         hedis-0.10.10:Database.Redis.Transactions
                         hedis-0.10.10:Database.Redis.Types iproute-1.7.7:Data.IP.Addr
                         iproute-1.7.7:Data.IP.Range
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         network-uri-2.6.1.0:Network.URI
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         scotty-0.11.4:Web.Scotty.Internal.Types tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.3:Data.Vector vector-0.12.0.3:Data.Vector.Primitive
                         vector-0.12.0.3:Data.Vector.Storable
                         vector-0.12.0.3:Data.Vector.Unboxed
                         vector-0.12.0.3:Data.Vector.Unboxed.Base
import  -/  base-4.12.0.0:Control.Monad 07eaec7fd256019b318d048d00f45b1c
import  -/  base-4.12.0.0:Control.Monad.IO.Class e96805f9d79f75be66a0d44eb83064c1
import  -/  base-4.12.0.0:Data.Either 423bee738f25e5ee983d072216009be8
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  bytestring-0.10.8.2:Data.ByteString.Char8 c4fe0102babc102f36c4516d04d0159e
import  -/  bytestring-0.10.8.2:Data.ByteString.Internal f8067c0775041a7adb8f53745475ed88
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  hedis-0.10.10:Database.Redis 11e63fb4ec2d0124c5836a457c53b9e6
import  -/  hedis-0.10.10:Database.Redis.Commands 301387065b513340b17a2323c20ce095
import  -/  hedis-0.10.10:Database.Redis.Core 0c7c38ca3193f25b5ba4a84063df32b3
import  -/  hedis-0.10.10:Database.Redis.ManualCommands 53f20725979a255470a5c77cf16fe7f8
import  -/  hedis-0.10.10:Database.Redis.Protocol e25fe04cdb3611622fb159e520885afc
import  -/  hedis-0.10.10:Database.Redis.Types b25d97f67f4c752f1ddb9a7d6bb5236f
import  -/  network-uri-2.6.1.0:Network.URI 6a3d3e0e62429c78934bb119c6bec986
import  -/  random-1.1:System.Random c6898761a03910f08acbe56f79c5fa96
import  -/  scotty-0.11.4:Web.Scotty e22c18d6ca60d6b71e4a3676acf4a97a
import  -/  text-1.2.3.1:Data.Text.Encoding 7ce1a7bbcff1af07caf6c914233ce5e8
import  -/  text-1.2.3.1:Data.Text.Internal.Lazy eac10e28f87d00cb1947104992cf5120
import  -/  text-1.2.3.1:Data.Text.Lazy 3ec155792299896bd594434f570556bc
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
02944876882512c6fb066f73bd530e70
  $wapp ::
    Database.Redis.Core.Connection
    -> Web.Scotty.Internal.Types.ScottyState
         Data.Text.Internal.Lazy.Text GHC.Types.IO
    -> (# (),
          Web.Scotty.Internal.Types.ScottyState
            Data.Text.Internal.Lazy.Text GHC.Types.IO #)
  {- Arity: 2,
     Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*U(U,U,U)>,
     Inline: [2] -}
04dab8f1e1ec346c2782105867a46010
  $wgetURI ::
    GHC.Types.IO Database.Redis.ProtocolPipelining.Connection
    -> (Database.Redis.ProtocolPipelining.Connection
        -> GHC.Types.IO ())
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Data.Vector.Vector
         (Data.Pool.LocalPool Database.Redis.ProtocolPipelining.Connection)
    -> Data.ByteString.Internal.ByteString
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Database.Redis.Protocol.Reply
            (GHC.Maybe.Maybe Data.ByteString.Internal.ByteString) #)
  {- Arity: 7,
     Strictness: <L,C(U)><L,1*C1(C1(U))><S,1*U><L,1*U(U)><L,1*U(U,U,U)><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.IO
                            Database.Redis.ProtocolPipelining.Connection)
                   (ww1 :: Database.Redis.ProtocolPipelining.Connection
                           -> GHC.Types.IO ())
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: Data.Vector.Vector
                             (Data.Pool.LocalPool Database.Redis.ProtocolPipelining.Connection))
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Data.Pool.$w$swithResource
                   @ Database.Redis.ProtocolPipelining.Connection
                   @ (Data.Either.Either
                        Database.Redis.Protocol.Reply
                        (GHC.Maybe.Maybe Data.ByteString.Internal.ByteString))
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   (\ (conn :: Database.Redis.ProtocolPipelining.Connection)[OneShot]
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case GHC.Prim.newMutVar#
                           @ Database.Redis.Protocol.Reply
                           @ GHC.Prim.RealWorld
                           Database.Redis.Core.checkedConnect5
                           eta of ds { (#,#) ipv ipv1 ->
                    case conn of ww5 { Database.Redis.ProtocolPipelining.Conn ww6 ww7 ww8 ww9 ->
                    case ww9
                           `cast`
                         (GHC.IORef.N:IORef[0] <GHC.Types.Int>_N) of ww10 { GHC.STRef.STRef ww11 ->
                    case Database.Redis.ProtocolPipelining.$wsend
                           ww6
                           ww8
                           ww11
                           (Database.Redis.Protocol.renderRequest
                              (GHC.Types.:
                                 @ Data.ByteString.Internal.ByteString
                                 Database.Redis.Commands.configGet1
                                 (GHC.Types.:
                                    @ Data.ByteString.Internal.ByteString
                                    w
                                    (GHC.Types.[] @ Data.ByteString.Internal.ByteString))))
                           ipv of ds2 { (#,#) ipv2 ipv3 ->
                    case ww7
                           `cast`
                         (GHC.IORef.N:IORef[0] <[Database.Redis.Protocol.Reply]>_N) of wild1 { GHC.STRef.STRef var# ->
                    case GHC.Prim.readMutVar#
                           @ GHC.Prim.RealWorld
                           @ [Database.Redis.Protocol.Reply]
                           var#
                           ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                    let {
                      $j1 :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> Database.Redis.Protocol.Reply
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   Data.Either.Either
                                     Database.Redis.Protocol.Reply
                                     (GHC.Maybe.Maybe Data.ByteString.Internal.ByteString) #)
                        <join 2> {- Arity: 2, Strictness: <S,U><L,1*U> -}
                      = \ (ipv6 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                          (ipv7 :: Database.Redis.Protocol.Reply)[OneShot] ->
                        case GHC.Prim.readMutVar#
                               @ GHC.Prim.RealWorld
                               @ Database.Redis.Protocol.Reply
                               ipv1
                               ipv6 of ds1 { (#,#) ipv8 ipv9 ->
                        case ipv9 of ds3 { DEFAULT ->
                        (# ipv8,
                           case ipv7 of wild {
                             DEFAULT
                             -> Data.Either.Left
                                  @ Database.Redis.Protocol.Reply
                                  @ (GHC.Maybe.Maybe Data.ByteString.Internal.ByteString)
                                  wild
                             Database.Redis.Protocol.SingleLine s
                             -> Data.Either.Right
                                  @ Database.Redis.Protocol.Reply
                                  @ (GHC.Maybe.Maybe Data.ByteString.Internal.ByteString)
                                  (GHC.Maybe.Just @ Data.ByteString.Internal.ByteString s)
                             Database.Redis.Protocol.Bulk ds8
                             -> case ds8 of wild2 {
                                  GHC.Maybe.Nothing
                                  -> Database.Redis.Types.$fRedisResultMaybe1
                                       @ Data.ByteString.Internal.ByteString
                                  GHC.Maybe.Just ipv10
                                  -> Data.Either.Right
                                       @ Database.Redis.Protocol.Reply
                                       @ (GHC.Maybe.Maybe Data.ByteString.Internal.ByteString)
                                       wild2 }
                             Database.Redis.Protocol.MultiBulk ds8
                             -> case ds8 of wild2 {
                                  GHC.Maybe.Nothing
                                  -> Database.Redis.Types.$fRedisResultMaybe1
                                       @ Data.ByteString.Internal.ByteString
                                  GHC.Maybe.Just ipv10
                                  -> Data.Either.Left
                                       @ Database.Redis.Protocol.Reply
                                       @ (GHC.Maybe.Maybe Data.ByteString.Internal.ByteString)
                                       wild } } #) } }
                    } in
                    case ipv5 of wild2 {
                      []
                      -> case Database.Redis.ProtocolPipelining.recv2
                                `cast`
                              (GHC.Types.N:IO[0] <Database.Redis.Protocol.Reply>_R)
                                ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                         case GHC.Prim.writeMutVar#
                                @ GHC.Prim.RealWorld
                                @ Database.Redis.Protocol.Reply
                                ipv1
                                ipv7
                                ipv6 of s2# { DEFAULT ->
                         $j1 s2# ipv7 } }
                      : r rs
                      -> case GHC.Prim.writeMutVar#
                                @ GHC.Prim.RealWorld
                                @ [Database.Redis.Protocol.Reply]
                                var#
                                rs
                                ipv4 of s2# { DEFAULT ->
                         case GHC.Prim.writeMutVar#
                                @ GHC.Prim.RealWorld
                                @ Database.Redis.Protocol.Reply
                                ipv1
                                r
                                s2# of s2#1 { DEFAULT ->
                         $j1 s2#1 r } } } } } } } } })
                     `cast`
                   (<Database.Redis.ProtocolPipelining.Connection>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Database.Redis.Protocol.Reply
                                     (GHC.Maybe.Maybe Data.ByteString.Internal.ByteString)>_R))
                   w1) -}
569fcdb6668e44413d4e8a3f2fff4010
  $winner ::
    Data.Text.Array.MArray s1
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Lazy.Text #)
  {- Arity: 5, Strictness: <L,1*U(U)><L,U><L,1*U><S,U><S,U>,
     Inline: [2] -}
2e1a4c4e52c3b33b04c7cbde803fb9f7
  $winner1 ::
    Data.Text.Array.MArray s1
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Lazy.Text #)
  {- Arity: 5, Strictness: <L,1*U(U)><L,U><L,1*U><S,U><S,U>,
     Inline: [2] -}
aa24f5373a324dbdcd47584816f794e7
  $winner2 ::
    Data.Text.Array.MArray s1
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Lazy.Text #)
  {- Arity: 5, Strictness: <L,1*U(U)><L,U><L,1*U><S,U><S,U>,
     Inline: [2] -}
f23c0632df5e87c4dd5d0b6a15e99cc7
  $winner3 ::
    Data.Text.Array.MArray s1
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Lazy.Text #)
  {- Arity: 5, Strictness: <L,1*U(U)><L,U><L,1*U><S,U><S,U>,
     Inline: [2] -}
d537d9602013c6043be5d3bc7b6ceb4a
  $winner4 ::
    Data.Text.Array.MArray s1
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Lazy.Text #)
  {- Arity: 5, Strictness: <L,1*U(U)><L,U><L,1*U><S,U><S,U>,
     Inline: [2] -}
0f37af7259e1b99ee0f6a6b0f5edc5ba
  $wloop ::
    GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [2] -}
f03085c22fa6be6c89d83c4237791301
  $wsaveURI ::
    GHC.Types.IO Database.Redis.ProtocolPipelining.Connection
    -> (Database.Redis.ProtocolPipelining.Connection
        -> GHC.Types.IO ())
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Data.Vector.Vector
         (Data.Pool.LocalPool Database.Redis.ProtocolPipelining.Connection)
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Database.Redis.Protocol.Reply Database.Redis.Types.Status #)
  {- Arity: 8,
     Strictness: <L,C(U)><L,1*C1(C1(U))><S,1*U><L,1*U(U)><L,1*U(U,U,U)><L,U><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.IO
                            Database.Redis.ProtocolPipelining.Connection)
                   (ww1 :: Database.Redis.ProtocolPipelining.Connection
                           -> GHC.Types.IO ())
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: Data.Vector.Vector
                             (Data.Pool.LocalPool Database.Redis.ProtocolPipelining.Connection))
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Data.Pool.$w$swithResource
                   @ Database.Redis.ProtocolPipelining.Connection
                   @ (Data.Either.Either
                        Database.Redis.Protocol.Reply Database.Redis.Types.Status)
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   (\ (conn :: Database.Redis.ProtocolPipelining.Connection)[OneShot]
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case GHC.Prim.newMutVar#
                           @ Database.Redis.Protocol.Reply
                           @ GHC.Prim.RealWorld
                           Database.Redis.Core.checkedConnect5
                           eta of ds { (#,#) ipv ipv1 ->
                    case conn of ww5 { Database.Redis.ProtocolPipelining.Conn ww6 ww7 ww8 ww9 ->
                    case ww9
                           `cast`
                         (GHC.IORef.N:IORef[0] <GHC.Types.Int>_N) of ww10 { GHC.STRef.STRef ww11 ->
                    case Database.Redis.ProtocolPipelining.$wsend
                           ww6
                           ww8
                           ww11
                           (Database.Redis.Protocol.renderRequest
                              (GHC.Types.:
                                 @ Data.ByteString.Internal.ByteString
                                 Database.Redis.ManualCommands.set1
                                 (GHC.Types.:
                                    @ Data.ByteString.Internal.ByteString
                                    w
                                    (GHC.Types.:
                                       @ Data.ByteString.Internal.ByteString
                                       w1
                                       (GHC.Types.[] @ Data.ByteString.Internal.ByteString)))))
                           ipv of ds2 { (#,#) ipv2 ipv3 ->
                    case ww7
                           `cast`
                         (GHC.IORef.N:IORef[0] <[Database.Redis.Protocol.Reply]>_N) of wild1 { GHC.STRef.STRef var# ->
                    case GHC.Prim.readMutVar#
                           @ GHC.Prim.RealWorld
                           @ [Database.Redis.Protocol.Reply]
                           var#
                           ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                    case ipv5 of wild2 {
                      []
                      -> case Database.Redis.ProtocolPipelining.recv2
                                `cast`
                              (GHC.Types.N:IO[0] <Database.Redis.Protocol.Reply>_R)
                                ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                         case GHC.Prim.writeMutVar#
                                @ GHC.Prim.RealWorld
                                @ Database.Redis.Protocol.Reply
                                ipv1
                                ipv7
                                ipv6 of s2# { DEFAULT ->
                         case GHC.Prim.readMutVar#
                                @ GHC.Prim.RealWorld
                                @ Database.Redis.Protocol.Reply
                                ipv1
                                s2# of ds1 { (#,#) ipv8 ipv9 ->
                         case ipv9 of ds8 { DEFAULT ->
                         (# ipv8,
                            Database.Redis.Types.$fRedisResultStatus_$cdecode ipv7 #) } } } }
                      : r rs
                      -> case GHC.Prim.writeMutVar#
                                @ GHC.Prim.RealWorld
                                @ [Database.Redis.Protocol.Reply]
                                var#
                                rs
                                ipv4 of s2# { DEFAULT ->
                         case GHC.Prim.writeMutVar#
                                @ GHC.Prim.RealWorld
                                @ Database.Redis.Protocol.Reply
                                ipv1
                                r
                                s2# of s2#1 { DEFAULT ->
                         case GHC.Prim.readMutVar#
                                @ GHC.Prim.RealWorld
                                @ Database.Redis.Protocol.Reply
                                ipv1
                                s2#1 of ds1 { (#,#) ipv6 ipv7 ->
                         case ipv7 of ds3 { DEFAULT ->
                         (# ipv6,
                            Database.Redis.Types.$fRedisResultStatus_$cdecode
                              r #) } } } } } } } } } } })
                     `cast`
                   (<Database.Redis.ProtocolPipelining.Connection>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Database.Redis.Protocol.Reply Database.Redis.Types.Status>_R))
                   w2) -}
5ad7964fb27483bdbaff8f942a6ad0d9
  $wshortyCreated ::
    (a -> GHC.Base.String)
    -> a -> GHC.Base.String -> Data.Text.Internal.Lazy.Text
  {- Arity: 3, Strictness: <C(S),1*C1(U)><L,U><L,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   (ww :: a -> GHC.Base.String)
                   (w :: a)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Base.map
                        @ GHC.Types.Char
                        @ GHC.Types.Char
                        Data.Text.Internal.safe
                        (ww w) of dt { DEFAULT ->
                 Main.shortyAintUri_go10
                   (Main.shortyCreated_outer4 dt)
                   (GHC.Types.:
                      @ Data.Text.Internal.Lazy.Text
                      Main.shortyCreated3
                      (GHC.Types.:
                         @ Data.Text.Internal.Lazy.Text
                         (case GHC.Base.map
                                 @ GHC.Types.Char
                                 @ GHC.Types.Char
                                 Data.Text.Internal.safe
                                 (GHC.CString.unpackAppendCString#
                                    Main.linkShorty2
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       w1
                                       Main.shortyCreated5)) of dt1 { DEFAULT ->
                          Main.shortyCreated_outer3 dt1 })
                         (GHC.Types.[] @ Data.Text.Internal.Lazy.Text))) }) -}
9830642b5f0b8981aa86902c6283e77d
  alphaNum :: GHC.Base.String
  {- Unfolding: (Main.alphaNum_go 65#) -}
05322aee3b462f82a42c09bfc9bd3366
  alphaNum_go :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,U> -}
696e683e0b1f84bef8442ae4e553c9f2
  app :: Database.Redis.Core.Connection -> Web.Scotty.ScottyM ()
  {- Arity: 2,
     Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Main.app1
                  `cast`
                (<Database.Redis.Core.Connection>_R
                 ->_R (<Web.Scotty.Internal.Types.ScottyState
                          Data.Text.Internal.Lazy.Text GHC.Types.IO>_R
                       ->_R Nth:3
                                (<Web.Scotty.Internal.Types.ScottyState
                                    Data.Text.Internal.Lazy.Text GHC.Types.IO>_R
                                 ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                               <((),
                                                 Web.Scotty.Internal.Types.ScottyState
                                                   Data.Text.Internal.Lazy.Text
                                                   GHC.Types.IO)>_R))) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                   <Web.Scotty.Internal.Types.ScottyState
                                                                                      Data.Text.Internal.Lazy.Text
                                                                                      GHC.Types.IO>_N
                                                                                   <Data.Functor.Identity.Identity>_R
                                                                                   <()>_N) ; Sym (Web.Scotty.Internal.Types.N:ScottyT[0]
                                                                                                      <Data.Text.Internal.Lazy.Text>_N
                                                                                                      <GHC.Types.IO>_N) <()>_N)) -}
16a23c054ec207898368928e09022ab6
  app1 ::
    Database.Redis.Core.Connection
    -> Web.Scotty.Internal.Types.ScottyState
         Data.Text.Internal.Lazy.Text GHC.Types.IO
    -> ((),
        Web.Scotty.Internal.Types.ScottyState
          Data.Text.Internal.Lazy.Text GHC.Types.IO)
  {- Arity: 2,
     Strictness: <L,U(C(U),C(C1(U)),U(U),A,U(U),U(U,U,U),A)><L,1*U(U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Database.Redis.Core.Connection)
                   (w1 :: Web.Scotty.Internal.Types.ScottyState
                            Data.Text.Internal.Lazy.Text GHC.Types.IO) ->
                 case Main.$wapp w w1 of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
56bec5a30a4556bff23bd0f2b41d51ff
  getURI ::
    Database.Redis.Core.Connection
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.IO
         (Data.Either.Either
            Database.Redis.Protocol.Reply
            (GHC.Maybe.Maybe Data.ByteString.Internal.ByteString))
  {- Arity: 3,
     Strictness: <S(LLS(S)LLLL),1*U(C(U),1*C1(C1(U)),1*U(1*U),A,1*U(U),1*U(U,U,U),A)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getURI1
                  `cast`
                (<Database.Redis.Core.Connection>_R
                 ->_R <Data.ByteString.Internal.ByteString>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Database.Redis.Protocol.Reply
                                  (GHC.Maybe.Maybe Data.ByteString.Internal.ByteString)>_R)) -}
56b3cd9e9cb25825d9c71fe3d455860f
  getURI1 ::
    Database.Redis.Core.Connection
    -> Data.ByteString.Internal.ByteString
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Database.Redis.Protocol.Reply
            (GHC.Maybe.Maybe Data.ByteString.Internal.ByteString) #)
  {- Arity: 3,
     Strictness: <S(LLS(S)LLLL),1*U(C(U),1*C1(C1(U)),1*U(1*U),A,1*U(U),1*U(U,U,U),A)><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Database.Redis.Core.Connection)
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (Database.Redis.Core.N:Connection[0]) of ww { Data.Pool.Pool ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww3 of ww8 { GHC.Types.I# ww9 ->
                 Main.$wgetURI ww1 ww2 ww9 ww5 ww6 w1 w2 } }) -}
e1523b45af4a465361f7d227595ebf0f
  linkShorty :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (shorty :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Main.linkShorty2
                   (GHC.Base.build
                      @ GHC.Types.Char
                      (\ @ b
                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                         (n1 :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b
                         c
                         (GHC.CString.unpackFoldrCString# @ b Main.linkShorty1 c n1)
                         shorty))) -}
2754b0bdecdcb5ce17a79052962da608
  linkShorty1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\">Copy and paste your short URL</a>"#) -}
2e66cb2a635bd8d5bf18ce6be6362a7d
  linkShorty2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<a href=\""#) -}
fb572878a0ee6569ea9077d002d8ab59
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
7d58233a10f8db45a305a9090666de46
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Database.Redis.Core.$wconnect
                        Database.Redis.Core.defaultConnectInfo6
                        Database.Redis.Core.defaultConnectInfo4
                        (GHC.Maybe.Nothing @ Data.ByteString.Internal.ByteString)
                        Database.Redis.Core.defaultConnectInfo3
                        50#
                        Database.Redis.Core.defaultConnectInfo1
                          `cast`
                        (Sym (Data.Fixed.N:Fixed[0]
                                  <Data.Fixed.E12>_P) ; Sym (Data.Time.Clock.Internal.NominalDiffTime.N:NominalDiffTime[0]))
                        (GHC.Maybe.Nothing
                           @ Data.Time.Clock.Internal.NominalDiffTime.NominalDiffTime)
                        (GHC.Maybe.Nothing @ Network.TLS.Parameters.ClientParams)
                        s of ds1 { (#,#) ipv ipv1 ->
                 Web.Scotty.scotty1
                   Main.main2
                   (Main.app1 ipv1)
                     `cast`
                   ((<Web.Scotty.Internal.Types.ScottyState
                        Data.Text.Internal.Lazy.Text GHC.Types.IO>_R
                     ->_R Nth:3
                              (<Web.Scotty.Internal.Types.ScottyState
                                  Data.Text.Internal.Lazy.Text GHC.Types.IO>_R
                               ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                             <((),
                                               Web.Scotty.Internal.Types.ScottyState
                                                 Data.Text.Internal.Lazy.Text
                                                 GHC.Types.IO)>_R))) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                 <Web.Scotty.Internal.Types.ScottyState
                                                                                    Data.Text.Internal.Lazy.Text
                                                                                    GHC.Types.IO>_N
                                                                                 <Data.Functor.Identity.Identity>_R
                                                                                 <()>_N) ; Sym (Web.Scotty.Internal.Types.N:ScottyT[0]
                                                                                                    <Data.Text.Internal.Lazy.Text>_N
                                                                                                    <GHC.Types.IO>_N) <()>_N))
                   ipv }) -}
27131921259775f578ab997f18e70733
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3000#) -}
9e0942948286842b43da8bda79042960
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
848d09d4eb668d2dbb9eaafb060ebc44
  randomElement :: GHC.Base.String -> GHC.Types.IO GHC.Types.Char
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.randomElement1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Char>_R)) -}
699399555b02da0aca6a1ecbc5d8b6da
  randomElement1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (xs :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.$fRandomInt3
                        (Main.randomElement2,
                         case GHC.List.$wlenAcc @ GHC.Types.Char xs 0# of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1#) })
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.List.!! @ GHC.Types.Char xs ipv1 #) }) -}
53b39f36d7a4fe0b429747227d8fbb03
  randomElement2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b1f4891c61eb2dcc8d7910bc7adc6276
  saveURI ::
    Database.Redis.Core.Connection
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.IO
         (Data.Either.Either
            Database.Redis.Protocol.Reply Database.Redis.Types.Status)
  {- Arity: 4,
     Strictness: <S(LLS(S)LLLL),1*U(C(U),1*C1(C1(U)),1*U(1*U),A,1*U(U),1*U(U,U,U),A)><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.saveURI1
                  `cast`
                (<Database.Redis.Core.Connection>_R
                 ->_R <Data.ByteString.Internal.ByteString>_R
                 ->_R <Data.ByteString.Internal.ByteString>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Database.Redis.Protocol.Reply Database.Redis.Types.Status>_R)) -}
5c797f4a1253cdf34dfebe9093d13208
  saveURI1 ::
    Database.Redis.Core.Connection
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Database.Redis.Protocol.Reply Database.Redis.Types.Status #)
  {- Arity: 4,
     Strictness: <S(LLS(S)LLLL),1*U(C(U),1*C1(C1(U)),1*U(1*U),A,1*U(U),1*U(U,U,U),A)><L,U><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Database.Redis.Core.Connection)
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: Data.ByteString.Internal.ByteString)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (Database.Redis.Core.N:Connection[0]) of ww { Data.Pool.Pool ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww3 of ww8 { GHC.Types.I# ww9 ->
                 Main.$wsaveURI ww1 ww2 ww9 ww5 ww6 w1 w2 w3 } }) -}
e70208f862869d43e8c3c4cb90d6ef8c
  shortyAintUri ::
    Data.Text.Internal.Lazy.Text -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (uri :: Data.Text.Internal.Lazy.Text) ->
                 Main.shortyAintUri_go10
                   uri
                   (GHC.Types.:
                      @ Data.Text.Internal.Lazy.Text
                      Main.shortyAintUri1
                      (GHC.Types.[] @ Data.Text.Internal.Lazy.Text))) -}
4f8d4e8fbfced4e54464710c2f7e818d
  shortyAintUri1 :: Data.Text.Internal.Lazy.Text
  {- Unfolding: (Data.Text.Lazy.unpackCString#
                   Main.shortyAintUri2) -}
f4e5933fe5da89ce440cf7826a2e10c8
  shortyAintUri2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: (" wasn't a url, did you forget http://?"#) -}
26137283026793b3bdafb7ccf22622cb
  shortyAintUri_go10 ::
    Data.Text.Internal.Lazy.Text
    -> [Data.Text.Internal.Lazy.Text] -> Data.Text.Internal.Lazy.Text
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
423fc7f427b3cb46e9c0f6b270a84b3c
  shortyCreated ::
    GHC.Show.Show a =>
    a -> GHC.Base.String -> Data.Text.Internal.Lazy.Text
  {- Arity: 3, Strictness: <S(LC(S)L),1*U(A,1*C1(U),A)><L,U><L,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Show.Show a) (w1 :: a) (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Show.C:Show ww1 ww2 ww3 ->
                 Main.$wshortyCreated @ a ww2 w1 w2 }) -}
7141c961e6375465672d19614e6ab9a5
  shortyCreated1 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.shortyCreated2) -}
904bddac4bc3f342f1170709c0d3385e
  shortyCreated2 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2801872d2d2cd36e9d9d53899b517be3
  shortyCreated3 :: Data.Text.Internal.Lazy.Text
  {- Unfolding: (Data.Text.Lazy.unpackCString#
                   Main.shortyCreated4) -}
d3fa16f12d6e1def6eca5f4fea2c27c3
  shortyCreated4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" shorty is: "#) -}
0985742e11032a910fcd5076b641e698
  shortyCreated5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.linkShorty1) -}
664fb8ea276193e4448da00a97407843
  shortyCreated_$sshortyCreated ::
    Data.Either.Either
      Database.Redis.Protocol.Reply Database.Redis.Types.Status
    -> GHC.Base.String -> Data.Text.Internal.Lazy.Text
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (resp :: Data.Either.Either
                              Database.Redis.Protocol.Reply Database.Redis.Types.Status)
                   (shawty :: GHC.Base.String) ->
                 let {
                   karg :: Data.Text.Internal.Lazy.Text
                   = case GHC.Base.map
                            @ GHC.Types.Char
                            @ GHC.Types.Char
                            Data.Text.Internal.safe
                            (GHC.CString.unpackAppendCString#
                               Main.linkShorty2
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  shawty
                                  Main.shortyCreated5)) of dt { DEFAULT ->
                     Main.shortyCreated_outer2 dt }
                 } in
                 case resp of wild {
                   Data.Either.Left b1
                   -> case GHC.Base.map
                             @ GHC.Types.Char
                             @ GHC.Types.Char
                             Data.Text.Internal.safe
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Data.Either.$fShowEither4
                                (Database.Redis.Protocol.$w$cshowsPrec
                                   11#
                                   b1
                                   (GHC.Types.[] @ GHC.Types.Char))) of dt { DEFAULT ->
                      Main.shortyAintUri_go10
                        (Main.shortyCreated_outer1 dt)
                        (GHC.Types.:
                           @ Data.Text.Internal.Lazy.Text
                           Main.shortyCreated3
                           (GHC.Types.:
                              @ Data.Text.Internal.Lazy.Text
                              karg
                              (GHC.Types.[] @ Data.Text.Internal.Lazy.Text))) }
                   Data.Either.Right b1
                   -> case GHC.Base.map
                             @ GHC.Types.Char
                             @ GHC.Types.Char
                             Data.Text.Internal.safe
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Data.Either.$fShowEither2
                                (case b1 of wild1 {
                                   Database.Redis.Types.Ok -> Database.Redis.Types.$fShowStatus8
                                   Database.Redis.Types.Pong -> Database.Redis.Types.$fShowStatus5
                                   Database.Redis.Types.Status b2
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.$fShow(,)4
                                        (GHC.CString.unpackAppendCString#
                                           Database.Redis.Types.$fShowStatus3
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.$fShow(,)3
                                              (case b2 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                                               GHC.Show.showLitString
                                                 (Data.ByteString.Internal.$wunpackAppendCharsLazy
                                                    ww1
                                                    ww2
                                                    ww3
                                                    ww4
                                                    (GHC.Types.[] @ GHC.Types.Char))
                                                 Main.shortyCreated1 }))) })) of dt { DEFAULT ->
                      Main.shortyAintUri_go10
                        (Main.shortyCreated_outer dt)
                        (GHC.Types.:
                           @ Data.Text.Internal.Lazy.Text
                           Main.shortyCreated3
                           (GHC.Types.:
                              @ Data.Text.Internal.Lazy.Text
                              karg
                              (GHC.Types.[] @ Data.Text.Internal.Lazy.Text))) } }) -}
3b33416da914db4536c8a50ac9d9713e
  shortyCreated_outer ::
    [GHC.Types.Char] -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (so :: [GHC.Types.Char]) ->
                 case so of wild {
                   [] -> Data.Text.Internal.Lazy.Empty
                   : x xs
                   -> case x of dt { GHC.Types.C# ipv ->
                      case xs of dt1 { DEFAULT ->
                      case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Text.Internal.Lazy.Text #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newByteArray#
                                     @ GHC.Prim.RealWorld
                                     8#
                                     s1 of ds1 { (#,#) ipv1 ipv2 ->
                              let {
                                x1 :: GHC.Prim.Int# = GHC.Prim.ord# ipv
                              } in
                              case GHC.Prim.<# x1 65536# of lwild {
                                DEFAULT
                                -> let {
                                     x# :: GHC.Prim.Int# = GHC.Prim.-# x1 65536#
                                   } in
                                   case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          0#
                                          (GHC.Prim.narrow16Word#
                                             (GHC.Prim.int2Word#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.uncheckedIShiftRA# x# 10#)
                                                   55296#)))
                                          ipv1 of s2# { DEFAULT ->
                                   case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          1#
                                          (GHC.Prim.narrow16Word#
                                             (GHC.Prim.int2Word#
                                                (GHC.Prim.+# (GHC.Prim.andI# x# 1023#) 56320#)))
                                          s2# of s2#1 { DEFAULT ->
                                   Main.$winner
                                     @ GHC.Prim.RealWorld
                                     (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv2)
                                     4#
                                     dt1
                                     2#
                                     s2#1 } }
                                1#
                                -> case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          0#
                                          (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x1))
                                          ipv1 of s2# { DEFAULT ->
                                   Main.$winner
                                     @ GHC.Prim.RealWorld
                                     (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv2)
                                     4#
                                     dt1
                                     1#
                                     s2# } } }) of ds1 { (#,#) ipv1 ipv2 ->
                      ipv2 } } } }) -}
9b230d2f2b126b912c3addf326a13ab7
  shortyCreated_outer1 ::
    [GHC.Types.Char] -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (so :: [GHC.Types.Char]) ->
                 case so of wild {
                   [] -> Data.Text.Internal.Lazy.Empty
                   : x xs
                   -> case x of dt { GHC.Types.C# ipv ->
                      case xs of dt1 { DEFAULT ->
                      case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Text.Internal.Lazy.Text #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newByteArray#
                                     @ GHC.Prim.RealWorld
                                     8#
                                     s1 of ds1 { (#,#) ipv1 ipv2 ->
                              let {
                                x1 :: GHC.Prim.Int# = GHC.Prim.ord# ipv
                              } in
                              case GHC.Prim.<# x1 65536# of lwild {
                                DEFAULT
                                -> let {
                                     x# :: GHC.Prim.Int# = GHC.Prim.-# x1 65536#
                                   } in
                                   case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          0#
                                          (GHC.Prim.narrow16Word#
                                             (GHC.Prim.int2Word#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.uncheckedIShiftRA# x# 10#)
                                                   55296#)))
                                          ipv1 of s2# { DEFAULT ->
                                   case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          1#
                                          (GHC.Prim.narrow16Word#
                                             (GHC.Prim.int2Word#
                                                (GHC.Prim.+# (GHC.Prim.andI# x# 1023#) 56320#)))
                                          s2# of s2#1 { DEFAULT ->
                                   Main.$winner1
                                     @ GHC.Prim.RealWorld
                                     (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv2)
                                     4#
                                     dt1
                                     2#
                                     s2#1 } }
                                1#
                                -> case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          0#
                                          (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x1))
                                          ipv1 of s2# { DEFAULT ->
                                   Main.$winner1
                                     @ GHC.Prim.RealWorld
                                     (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv2)
                                     4#
                                     dt1
                                     1#
                                     s2# } } }) of ds1 { (#,#) ipv1 ipv2 ->
                      ipv2 } } } }) -}
440c3af1ce756b91f4138376a3cefcbf
  shortyCreated_outer2 ::
    [GHC.Types.Char] -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (so :: [GHC.Types.Char]) ->
                 case so of wild {
                   [] -> Data.Text.Internal.Lazy.Empty
                   : x xs
                   -> case x of dt { GHC.Types.C# ipv ->
                      case xs of dt1 { DEFAULT ->
                      case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Text.Internal.Lazy.Text #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newByteArray#
                                     @ GHC.Prim.RealWorld
                                     8#
                                     s1 of ds1 { (#,#) ipv1 ipv2 ->
                              let {
                                x1 :: GHC.Prim.Int# = GHC.Prim.ord# ipv
                              } in
                              case GHC.Prim.<# x1 65536# of lwild {
                                DEFAULT
                                -> let {
                                     x# :: GHC.Prim.Int# = GHC.Prim.-# x1 65536#
                                   } in
                                   case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          0#
                                          (GHC.Prim.narrow16Word#
                                             (GHC.Prim.int2Word#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.uncheckedIShiftRA# x# 10#)
                                                   55296#)))
                                          ipv1 of s2# { DEFAULT ->
                                   case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          1#
                                          (GHC.Prim.narrow16Word#
                                             (GHC.Prim.int2Word#
                                                (GHC.Prim.+# (GHC.Prim.andI# x# 1023#) 56320#)))
                                          s2# of s2#1 { DEFAULT ->
                                   Main.$winner2
                                     @ GHC.Prim.RealWorld
                                     (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv2)
                                     4#
                                     dt1
                                     2#
                                     s2#1 } }
                                1#
                                -> case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          0#
                                          (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x1))
                                          ipv1 of s2# { DEFAULT ->
                                   Main.$winner2
                                     @ GHC.Prim.RealWorld
                                     (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv2)
                                     4#
                                     dt1
                                     1#
                                     s2# } } }) of ds1 { (#,#) ipv1 ipv2 ->
                      ipv2 } } } }) -}
ffe6d6340c4b5cc360e927b14b9998e3
  shortyCreated_outer3 ::
    [GHC.Types.Char] -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (so :: [GHC.Types.Char]) ->
                 case so of wild {
                   [] -> Data.Text.Internal.Lazy.Empty
                   : x xs
                   -> case x of dt { GHC.Types.C# ipv ->
                      case xs of dt1 { DEFAULT ->
                      case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Text.Internal.Lazy.Text #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newByteArray#
                                     @ GHC.Prim.RealWorld
                                     8#
                                     s1 of ds1 { (#,#) ipv1 ipv2 ->
                              let {
                                x1 :: GHC.Prim.Int# = GHC.Prim.ord# ipv
                              } in
                              case GHC.Prim.<# x1 65536# of lwild {
                                DEFAULT
                                -> let {
                                     x# :: GHC.Prim.Int# = GHC.Prim.-# x1 65536#
                                   } in
                                   case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          0#
                                          (GHC.Prim.narrow16Word#
                                             (GHC.Prim.int2Word#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.uncheckedIShiftRA# x# 10#)
                                                   55296#)))
                                          ipv1 of s2# { DEFAULT ->
                                   case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          1#
                                          (GHC.Prim.narrow16Word#
                                             (GHC.Prim.int2Word#
                                                (GHC.Prim.+# (GHC.Prim.andI# x# 1023#) 56320#)))
                                          s2# of s2#1 { DEFAULT ->
                                   Main.$winner3
                                     @ GHC.Prim.RealWorld
                                     (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv2)
                                     4#
                                     dt1
                                     2#
                                     s2#1 } }
                                1#
                                -> case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          0#
                                          (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x1))
                                          ipv1 of s2# { DEFAULT ->
                                   Main.$winner3
                                     @ GHC.Prim.RealWorld
                                     (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv2)
                                     4#
                                     dt1
                                     1#
                                     s2# } } }) of ds1 { (#,#) ipv1 ipv2 ->
                      ipv2 } } } }) -}
1e1168aced662b1b0155a7446d9135a2
  shortyCreated_outer4 ::
    [GHC.Types.Char] -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (so :: [GHC.Types.Char]) ->
                 case so of wild {
                   [] -> Data.Text.Internal.Lazy.Empty
                   : x xs
                   -> case x of dt { GHC.Types.C# ipv ->
                      case xs of dt1 { DEFAULT ->
                      case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Text.Internal.Lazy.Text #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newByteArray#
                                     @ GHC.Prim.RealWorld
                                     8#
                                     s1 of ds1 { (#,#) ipv1 ipv2 ->
                              let {
                                x1 :: GHC.Prim.Int# = GHC.Prim.ord# ipv
                              } in
                              case GHC.Prim.<# x1 65536# of lwild {
                                DEFAULT
                                -> let {
                                     x# :: GHC.Prim.Int# = GHC.Prim.-# x1 65536#
                                   } in
                                   case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          0#
                                          (GHC.Prim.narrow16Word#
                                             (GHC.Prim.int2Word#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.uncheckedIShiftRA# x# 10#)
                                                   55296#)))
                                          ipv1 of s2# { DEFAULT ->
                                   case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          1#
                                          (GHC.Prim.narrow16Word#
                                             (GHC.Prim.int2Word#
                                                (GHC.Prim.+# (GHC.Prim.andI# x# 1023#) 56320#)))
                                          s2# of s2#1 { DEFAULT ->
                                   Main.$winner4
                                     @ GHC.Prim.RealWorld
                                     (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv2)
                                     4#
                                     dt1
                                     2#
                                     s2#1 } }
                                1#
                                -> case GHC.Prim.writeWord16Array#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          0#
                                          (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x1))
                                          ipv1 of s2# { DEFAULT ->
                                   Main.$winner4
                                     @ GHC.Prim.RealWorld
                                     (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv2)
                                     4#
                                     dt1
                                     1#
                                     s2# } } }) of ds1 { (#,#) ipv1 ipv2 ->
                      ipv2 } } } }) -}
ca0e43a93c085b76a2bf2a29ca662537
  shortyFound ::
    Data.Text.Internal.Lazy.Text -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (tbs :: Data.Text.Internal.Lazy.Text) ->
                 Main.shortyAintUri_go10
                   Main.shortyFound5
                   (GHC.Types.:
                      @ Data.Text.Internal.Lazy.Text
                      tbs
                      (GHC.Types.:
                         @ Data.Text.Internal.Lazy.Text
                         Main.shortyFound3
                         (GHC.Types.:
                            @ Data.Text.Internal.Lazy.Text
                            tbs
                            (GHC.Types.:
                               @ Data.Text.Internal.Lazy.Text
                               Main.shortyFound1
                               (GHC.Types.[] @ Data.Text.Internal.Lazy.Text)))))) -}
f7e662d3966b3e7ab40490184a5c3525
  shortyFound1 :: Data.Text.Internal.Lazy.Text
  {- Unfolding: (Data.Text.Lazy.unpackCString# Main.shortyFound2) -}
570af8cc9b679b40348c1a28c17761bc
  shortyFound2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("</a>"#) -}
2f88a585d3e5c7f81fce7753f83c3fe1
  shortyFound3 :: Data.Text.Internal.Lazy.Text
  {- Unfolding: (Data.Text.Lazy.unpackCString# Main.shortyFound4) -}
7efff2269eafb358f78847f6f959d8d7
  shortyFound4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\">"#) -}
36e898267d483213f39a34e1cac10139
  shortyFound5 :: Data.Text.Internal.Lazy.Text
  {- Unfolding: (Data.Text.Lazy.unpackCString# Main.linkShorty2) -}
b0667c1b7d325e06bc948f412f55f717
  shortyGen :: GHC.Types.IO [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.shortyGen1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R)) -}
74032615568c69f589f4e7aad3d27a39
  shortyGen1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.$wloop 7# w2) -}
"SPEC shortyCreated @ (Either Reply Status)" forall ($dShow :: GHC.Show.Show
                                                                 (Data.Either.Either
                                                                    Database.Redis.Protocol.Reply
                                                                    Database.Redis.Types.Status))
  Main.shortyCreated @ (Data.Either.Either
                          Database.Redis.Protocol.Reply Database.Redis.Types.Status)
                     $dShow
  = Main.shortyCreated_$sshortyCreated
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

